## Abordagens

Escreveremos o driver na UART no arquivo console.c (análogo ao arquivo do S32G2)

O console.c terá 2 funções:
- void console_init(void): é chamado pelo bsp_runtime_init do kernel.
- void bsp_put_char(char c): é chamado pelo kernel quando necessário.

Duas abordagens:
- desenvolver os drivers no linux e depois migrar para o XKY
- desenvolver os drivers e chamá-los na inicialização da Jetson (pelo start.S)

## Compilação

Procedimento:
- make clean
- make install
- scp kernel.efi -> PC servidor TFTP
- Observar a COM5 para (aplicação)
- Observar a COM7 para (secure monitor do EL3)

Nota: aarch64-linux-gnu-objcopy: kernel.elf: invalid bfd target
Deve-se usar aarch64-linux-gnu-objcopy versão 2.38 (no Ubuntu 22.04)

## Debug

Manual do arm: procurar ARM architecture reference manual for A-profile architecture (site developer.arm.com)

ESR = exception syndrome register

Códigos de ESR são exibidos quando há exceção
procurar significado em esr.arm64.dev

Binary dump:
aarch64-linux-gnu-objdump -D kernel.elf >> kernel.dump

## Problemas e soluções

- O base address da UART estava incorreto
- O endereço de start estava errado (deveria ser 0x80000000)
- O código do console_init() está com algum problema, mas não estamos precisando dele para o setup da UART

